import Head from 'next/head'
import React, { useEffect, useState } from 'react'
import Layout from '../../../components/layout'
import styles from '../../../styles/Solutions.module.scss'
import useTranslation from 'next-translate/useTranslation'
import ImageSection from '../../../components/image-section'
import { solutionDetailIdentifier } from '../../../constants/solutions'
import OurPartners from '../../../components/our-partners'
import { http } from '../../../utils/http'
import { useRouter } from 'next/router'
import { Product } from '../../../models/Product'
import RelatedProducts from '../../../components/related-products'
import { SolutionItem, SolutionPage } from '../../../models/SolutionPage'
import {
  mapProductPropertiesToCamelCase,
  mapSolutionPropertiesToCamelCase,
} from '../../../utils/mappings'

export default function Solutions() {
  const { t, lang } = useTranslation('common')
  const [solutionHeader, setSolutionHeader] = useState<SolutionItem>()
  const [solutionDetail, setSolutionDetail] = useState<SolutionItem>()
  const [relatedProducts, setRelateddProducts] = useState<Product[]>([])
  const router = useRouter()
  const { id } = router.query

  useEffect(() => {
    http
      .get(
        `/api/v1/products/get-all-products?&where[0][column]=categories:category_slug&where[0][value]=${id}&where[0][operator]==`,
        {
          headers: {
            'Content-Language': lang,
          },
        }
      )
      .then((res: any) => {
        const { data } = res.data
        const { items } = data
        if (items?.length > 0) {
          const products = mapProductPropertiesToCamelCase(items)
          setRelateddProducts(products)
        }
      })
      .catch((err: any) => {
        console.error('API response error', err)
      })
  }, [lang, id])

  useEffect(() => {
    http
      .get(
        `/api/v1/pagebuilder/get-by-identifier?identifier=${
          solutionDetailIdentifier[`${id}`]
        }`,
        {
          headers: {
            'Content-Language': lang,
          },
        }
      )
      .then(res => {
        const { data } = res.data
        const {
          content: { HEADER, DETAIL },
        } = data
        if (data) {
          const solution: SolutionPage = {
            id: data.id,
            name: data.name,
            identifier: data.identifier,
            content: {
              HEADER: mapSolutionPropertiesToCamelCase(HEADER),
              DETAIL: mapSolutionPropertiesToCamelCase(DETAIL),
            },
          }
          setSolutionHeader(solution.content.HEADER)
          setSolutionDetail(solution.content.DETAIL)
        }
      })
      .catch(err => {
        console.error('API response error', err)
      })
  }, [lang])

  return (
    <div className={styles['solutions-wrapper']}>
      <Head>
        <title>{`Winmed - ${t('solutions.titleCase')}`}</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Layout>
        <div className={styles.container}>
          <div className={styles['solution-card']}>
            {solutionHeader && (
              <ImageSection
                heading={solutionHeader?.title?.value}
                isPageTitle
                content={solutionHeader?.shortDescription?.value}
                buttonText={t(`moreInfo`)}
                image={solutionHeader?.image01?.value[0]}
                reverse
                orderReverse
              />
            )}
          </div>
        </div>
        <OurPartners />
        <RelatedProducts recommendedProducts={relatedProducts} />
        <div className={styles.container}>
          <div className={styles['solution-card']}>
            {solutionDetail && (
              <ImageSection
                heading={solutionDetail?.title?.value}
                content={solutionDetail?.longDescription?.value}
                buttonText={t(`moreInfo`)}
                image={solutionDetail?.image01?.value[0]}
                reverse
                icon='/icons/medical-s.svg'
                iconName={solutionDetail?.title?.value}
                iconPosition='center'
              />
            )}
          </div>
        </div>
      </Layout>
    </div>
  )
}
