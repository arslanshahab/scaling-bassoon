import Head from 'next/head'
import React, { useEffect, useState } from 'react'
import Layout from '../../components/layout'
import styles from '../../styles/Solutions.module.scss'
import useTranslation from 'next-translate/useTranslation'
import ImageSection from '../../components/image-section'
import { http } from '../../utils/http'
import { SolutionPage } from '../../models/SolutionPage'
import { solutionIcons, solutionsIdentifier } from '../../constants/solutions'
import { useRouter } from 'next/router'
import { mapSolutionPropertiesToCamelCase } from '../../utils/mappings'

export default function Solutions() {
  const { t, lang } = useTranslation('common')
  const [solutions, setSolutions] = useState<SolutionPage>()
  const router = useRouter()

  useEffect(() => {
    http
      .get(
        `/api/v1/pagebuilder/get-by-identifier?identifier=${solutionsIdentifier}`,
        {
          headers: {
            'Content-Language': lang,
          },
        }
      )
      .then(res => {
        const { data } = res.data
        const {
          content: { SOLUTION01, SOLUTION02, SOLUTION03 },
        } = data
        if (data) {
          const solutions: SolutionPage = {
            id: data.id,
            name: data.name,
            identifier: data.identifier,
            content: {
              SOLUTION01: mapSolutionPropertiesToCamelCase(SOLUTION01),
              SOLUTION02: mapSolutionPropertiesToCamelCase(SOLUTION02),
              SOLUTION03: mapSolutionPropertiesToCamelCase(SOLUTION03),
            },
          }
          setSolutions(solutions)
        }
      })
      .catch(err => {
        console.error('API response error', err)
      })
  }, [lang])

  return (
    <div className={styles['solutions-wrapper']}>
      <Head>
        <title>{`Winmed - ${t('solutions.titleCase')}`}</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Layout>
        <div className={styles.container}>
          <h1>{t('solutions.titleCase')}</h1>

          {solutions?.content! &&
            Object.entries(solutions?.content!).map(
              ([key, solution], index) => {
                return (
                  <div
                    key={index}
                    data-attrib={key}
                    className={styles['solution-card']}>
                    <ImageSection
                      heading={solution.title.value}
                      content={`<p>${solution.shortDescription.value} </p> \n <p>${solution.longDescription.value}</p>`}
                      buttonText={t('showSolutions')}
                      onClick={() => router.push('/solutions/1')}
                      image={solution.image01?.value[0]}
                      reverse
                      orderReverse={index % 2 === 0}
                      icon={solutionIcons[index].icon}
                      iconName={solutionIcons[index].identifier}
                      iconPosition={index % 2 === 0 ? 'bottom' : 'center'}
                    />
                  </div>
                )
              }
            )}
        </div>
      </Layout>
    </div>
  )
}
