import Head from 'next/head'
import Layout from '../../components/layout'
import { Col, Row, Skeleton, Space } from 'antd'
import useTranslation from 'next-translate/useTranslation'
import styles from '../../styles/Events.module.scss'
import BlogCard from '../../components/common/blog-card'
import { useEffect, useState } from 'react'
import { http } from '../../utils/http'
import { mapBlogPropertiesToCamelCase } from '../../utils/mappings'
import { Blog } from '../../models/Blog'
import { BlogCategory, global, SortingDirection } from '../../constants/global'
import { useWindowWidth } from '@react-hook/window-size'
import { useRouter } from 'next/router'

const perpage = 6
const orderColumn = 'ordinal'
const orderDirection = SortingDirection.ASC
const baseURL = `/api/v1/blogs/by-category/${BlogCategory.EDUCATION}?paginate=1&perPage=${perpage}&order_column=${orderColumn}&order_direction=${orderDirection}`

interface ICurrentURL {
  url: string
  isSearch: boolean
}

export default function Education() {
  const { t, lang } = useTranslation('common')
  const router = useRouter()

  const [blogs, setBlogs] = useState<Blog[]>([])
  const [paginationInfo, setPaginationInfo] = useState<any>()
  const [currentURL] = useState<ICurrentURL>({
    url: baseURL,
    isSearch: false,
  })
  const [visibleSkeletonItems, setVisibleSkeletonItems] = useState([1, 2, 3])
  const onlyWidth = useWindowWidth()

  const { mobileMaxWidth, tabletMaxWidth } = global.ourNews

  useEffect(() => {
    if (onlyWidth < mobileMaxWidth) {
      setVisibleSkeletonItems([1])
    }
    if (onlyWidth > mobileMaxWidth && onlyWidth < tabletMaxWidth) {
      setVisibleSkeletonItems([1, 2])
    }
    if (onlyWidth > tabletMaxWidth) {
      setVisibleSkeletonItems([1, 2, 3])
    }
  }, [onlyWidth, mobileMaxWidth, tabletMaxWidth])

  useEffect(() => {
    async function fetchBlogs() {
      try {
        const response = await loadMoreBlogs(currentURL.url, false)
        const { items } = response.data?.data || []
        const paginationInfo = response.data?.data?.pagination
        if (items?.length > 0) {
          const blogs = mapBlogPropertiesToCamelCase(items)
          setBlogs(blogs)
          setPaginationInfo(paginationInfo)
        } else {
          setBlogs([])
          setPaginationInfo(null)
        }
      } catch (error) {
        console.error(error)
      }
    }
    fetchBlogs()
  }, [lang, currentURL])

  // default function to fetch blogs, made it separate to handle pagination and avoid conflicts on language switching
  const loadMoreBlogs = async (url: string, isPaginatedRequest: boolean) => {
    const response = await http.get(`${url}`, {
      headers: {
        'Content-Language': lang,
      },
    })

    if (isPaginatedRequest) {
      const { items } = response.data?.data || []
      const paginationInfo = response.data?.data?.pagination
      if (items?.length > 0) {
        const blogs = mapBlogPropertiesToCamelCase(items)
        setBlogs(prevState => [...prevState, ...blogs])
        setPaginationInfo(paginationInfo)
      }
    }
    return response
  }

  const renderSkeletonLoading = () => {
    return (
      <Row gutter={32}>
        {visibleSkeletonItems.map((item, index) => (
          <Col
            span={8}
            xs={{ span: 24 }}
            md={{ span: 12 }}
            lg={{ span: 8 }}
            key={index}>
            <>
              <Space style={{ width: '100%' }}>
                <Skeleton.Avatar
                  size='large'
                  style={{ width: '300px', height: '200px' }}
                  shape='square'
                />
              </Space>
              <Skeleton active paragraph={{ rows: 3 }} />
            </>
          </Col>
        ))}
      </Row>
    )
  }

  return (
    <div className={styles['events-wrapper']}>
      <Head>
        <title>{`Winmed - ${t('education.titleCase')}`}</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Layout>
        <div className={styles.container}>
          <h1>{t('education.titleCase')}</h1>
          <div className={styles['events-cards-wrapper']}>
            {blogs?.length > 0 ? (
              <>
                <Row gutter={32}>
                  {blogs.map((item, index) => (
                    <Col
                      span={8}
                      xs={{ span: 24 }}
                      md={{ span: 12 }}
                      lg={{ span: 8 }}
                      key={index}>
                      <BlogCard
                        id={item.id}
                        image={item.featuredImage}
                        date={item.date}
                        title={item.title}
                        description={item.body}
                        onClick={() => router.push(`/education/${item.id}`)}
                      />
                    </Col>
                  ))}
                </Row>
                {paginationInfo?.next_page_url && (
                  <button
                    className={styles['btn-view-more']}
                    onClick={() =>
                      loadMoreBlogs(paginationInfo?.next_page_url, true)
                    }>
                    {t('viewMoreArticles')}
                  </button>
                )}
              </>
            ) : (
              renderSkeletonLoading()
            )}
          </div>
        </div>
      </Layout>
    </div>
  )
}
