import React, { useEffect, useState } from 'react'
import Head from 'next/head'
import { useRouter } from 'next/router'
import useTranslation from 'next-translate/useTranslation'
import { Row, Col } from 'antd'
import Layout from '../../../components/layout'
import styles from '../../../styles/CategoriesDetail.module.scss'
import { http } from '../../../utils/http'
import { Product } from '../../../models/Product'
import ProductCarousel from '../../../components/product-carousel'
import ProductShortDescription from '../../../components/product-short-description'
import ProductLongDescription from '../../../components/product-long-description'
import ProductBulletsDescription from '../../../components/product-bullets-description'
import ProductAttachments from '../../../components/product-attachments'
import RelatedProducts from '../../../components/related-products'

export default function CategoryDetail() {
  const { t, lang } = useTranslation('common')
  const [product, setProduct] = useState<Product>()
  const [isFullDesc, setIsFullDesc] = useState<boolean>(false)
  const router = useRouter()
  const { id } = router.query

  useEffect(() => {
    http
      .get(`/api/v1/products/get-single-product-by-id/${id}`, {
        headers: {
          'Content-Language': lang,
        },
      })
      .then((res: any) => {
        const { data } = res.data
        const { recommended_products } = data
        const { attachments } = data
        if (data) {
          // mapping product properties to retain camelCase convention
          const product = {
            ...data,
            productsTitle: data.products_title,
            productsShortDescription: data.products_short_description,
            productsDescription: data.products_description,
            productsAdditionalInfo: data.products_additional_info,
            productsCategoryId: data.products_category_id,
            productsFeaturedImage: data.products_featured_image,
            // mapping recommendedProperties properties to retain camelCase convention
            recommendedProducts: recommended_products.map((rp: any) => {
              return {
                ...rp,
                productsTitle: rp.products_title,
                productsShortDescription: rp.products_short_description,
                productsDescription: rp.products_description,
                productsAdditionalInfo: rp.products_additional_info,
                productsCategoryId: rp.products_category_id,
                productsFeaturedImage: rp.products_featured_image,
              }
            }),
            // mapping attachments properties to retain camelCase convention
            attachments: attachments.map((attachment: any) => {
              return {
                id: attachment.id,
                productId: attachment.product_id,
                attachmentUrl: attachment.attachment_url,
                attachmentName: attachment.attachment_name,
              }
            }),
          }
          setProduct(product)
          setIsFullDesc(product.productsAdditionalInfo === '')
        }
      })
      .catch((err: any) => {
        console.error('API response error', err)
      })
  }, [lang, id])

  return (
    <div>
      <Head>
        <title>{`Winmed - ${t('categories')}`}</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Layout>
        <div className={styles.container} style={{ paddingBottom: '2rem' }}>
          <Row gutter={{ sm: 32, md: 48, lg: 48 }}>
            <Col
              span={12}
              xs={{ span: 12 }}
              md={{ span: 11 }}
              lg={{ span: 11 }}>
              <ProductCarousel
                images={product?.images?.map(x => {
                  return {
                    ...x,
                    original: `${process.env.NEXT_PUBLIC_API_URL}${x.image_path}`,
                    thumbnail: `${process.env.NEXT_PUBLIC_API_URL}${x.image_path}`,
                  }
                })}
              />
            </Col>
            <Col
              span={12}
              xs={{ span: 12 }}
              md={{ span: 13 }}
              lg={{ span: 13 }}>
              {product && (
                <ProductShortDescription
                  id={product.id}
                  productsTitle={product.productsTitle}
                  productsDescription={product.productsDescription}
                  productsShortDescription={product.productsShortDescription}
                  attributes={product.attributes}
                  slug={product.slug}
                />
              )}
            </Col>
          </Row>
          <Row gutter={{ sm: 32, md: 48, lg: 48 }}>
            <Col
              span={24}
              xs={{ span: 24 }}
              md={{ span: isFullDesc ? 24 : 11 }}
              lg={{ span: isFullDesc ? 24 : 11 }}>
              <ProductLongDescription
                productsDescription={product?.productsDescription!}
              />
            </Col>
            {!isFullDesc && (
              <Col
                span={24}
                xs={{ span: 24 }}
                md={{ span: 13 }}
                lg={{ span: 13 }}>
                <ProductBulletsDescription
                  productsAdditionalInfo={product?.productsAdditionalInfo!}
                />
                <ProductAttachments attachments={product?.attachments!} />
              </Col>
            )}
          </Row>
        </div>
        <Row gutter={{ sm: 32, md: 32, lg: 32 }}>
          <Col span={24} xs={{ span: 24 }} md={{ span: 24 }} lg={{ span: 24 }}>
            <RelatedProducts
              recommendedProducts={product?.recommendedProducts!}
            />
          </Col>
        </Row>
      </Layout>
    </div>
  )
}
